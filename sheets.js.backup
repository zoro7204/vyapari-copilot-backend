const { google } = require('googleapis');
const path = require('path');

const SHEET_ID = process.env.SHEET_ID;

// Use the credentials.json file you uploaded to Replit
const credentials = JSON.parse(process.env.GOOGLE_CREDENTIALS);
const auth = new google.auth.GoogleAuth({
    credentials,
    scopes: ["https://www.googleapis.com/auth/spreadsheets"],
});

async function getSheetsClient() {
    const client = await auth.getClient();
    return google.sheets({ version: "v4", auth: client });
}

async function appendToSheet(row) {
    const sheets = await getSheetsClient();
    await sheets.spreadsheets.values.append({
        spreadsheetId: SHEET_ID,
        range: "Sheet1!A:I", // Match your number of columns
        valueInputOption: "USER_ENTERED",
        requestBody: { values: [row] },
    });
}

async function readSheet() {
    const sheets = await getSheetsClient();
    const response = await sheets.spreadsheets.values.get({
        spreadsheetId: SHEET_ID,
        range: 'Sheet1!A:M', // Read first 6 columns for summary
    });
    return response.data.values || [];
}

async function deleteRow(rowIndex) {
  const sheets = await getSheetsClient();
  const sheetId = 0; // The ID of the very first sheet in a document is 0.

  const request = {
    spreadsheetId: SHEET_ID,
    resource: {
      requests: [
        {
          deleteDimension: {
            range: {
              sheetId: sheetId,
              dimension: 'ROWS',
              startIndex: rowIndex - 1, // Google Sheets is 0-indexed, so row 55 is index 54.
              endIndex: rowIndex,
            },
          },
        },
      ],
    },
  };
  await sheets.spreadsheets.batchUpdate(request);
  console.log(`Deleted row ${rowIndex} from Google Sheet.`);
}

async function updateCell(range, value) {
  const sheets = await getSheetsClient();
  await sheets.spreadsheets.values.update({
    spreadsheetId: SHEET_ID,
    range: range, // e.g., "Sheet1!L56"
    valueInputOption: 'USER_ENTERED',
    resource: {
      values: [[value]],
    },
  });
  console.log(`Updated cell ${range} with value: ${value}`);
}

module.exports = { appendToSheet, readSheet, deleteRow, updateCell  };